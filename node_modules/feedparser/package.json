{
  "_from": "feedparser",
  "_id": "feedparser@2.2.9",
  "_inBundle": false,
  "_integrity": "sha1-kTgZfa/a4F/K3eADa+6vYGbCxek=",
  "_location": "/feedparser",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "feedparser",
    "fetchSpec": "latest",
    "name": "feedparser",
    "raw": "feedparser",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/feedparser/-/feedparser-2.2.9.tgz",
  "_shasum": "9138197dafdae05fcadde0036beeaf6066c2c5e9",
  "_spec": "feedparser",
  "_where": "/home/dwayne/danko",
  "author": {
    "email": "danmactough@gmail.com",
    "name": "Dan MacTough"
  },
  "bin": {
    "feedparser": "./bin/feedparser.js"
  },
  "bugs": {
    "url": "http://github.com/danmactough/node-feedparser/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "addressparser": "^1.0.1",
    "array-indexofobject": "~0.0.1",
    "lodash.assign": "^4.2.0",
    "lodash.get": "^4.4.2",
    "lodash.has": "^4.5.2",
    "lodash.uniq": "^4.5.0",
    "mri": "^1.1.0",
    "readable-stream": "^2.2.2",
    "sax": "^1.2.4"
  },
  "deprecated": false,
  "description": "Robust RSS Atom and RDF feed parsing using sax js",
  "devDependencies": {
    "eslint": "^4.8.0",
    "iconv": "^2.3.0",
    "mocha": "^4.0.1",
    "request": "^2.83.0"
  },
  "engines": {
    "node": ">= 4.2.0"
  },
  "files": [
    "bin/*.js",
    "index.js",
    "lib"
  ],
  "homepage": "http://github.com/danmactough/node-feedparser",
  "keywords": [
    "atom",
    "feed",
    "pubsubhubbub",
    "rdf",
    "rss",
    "rsscloud",
    "syndication",
    "xml"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "feedparser",
  "optionalDependencies": {},
  "readme": "#  Feedparser - Robust RSS, Atom, and RDF feed parsing in Node.js\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/danmactough/node-feedparser.svg)](https://greenkeeper.io/)\n\n[![Join the chat at https://gitter.im/danmactough/node-feedparser](https://badges.gitter.im/danmactough/node-feedparser.svg)](https://gitter.im/danmactough/node-feedparser?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://secure.travis-ci.org/danmactough/node-feedparser.png?branch=master)](https://travis-ci.org/danmactough/node-feedparser)\n\n[![NPM](https://nodei.co/npm/feedparser.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/feedparser/)\n\nFeedparser is for parsing RSS, Atom, and RDF feeds in node.js.\n\nIt has a couple features you don't usually see in other feed parsers:\n\n1. It resolves relative URLs (such as those seen in Tim Bray's \"ongoing\" [feed](http://www.tbray.org/ongoing/ongoing.atom)).\n2. It properly handles XML namespaces (including those in unusual feeds\nthat define a non-default namespace for the main feed elements).\n\n## Installation\n\n```bash\nnpm install feedparser\n```\n\n## Usage\n\nThis example is just to briefly demonstrate basic concepts.\n\n**Please** also review the [compressed example](examples/compressed.js) for a\nthorough working example that is a suitable starting point for your app.\n\n```js\n\nvar FeedParser = require('feedparser');\nvar request = require('request'); // for fetching the feed\n\nvar req = request('http://somefeedurl.xml')\nvar feedparser = new FeedParser([options]);\n\nreq.on('error', function (error) {\n  // handle any request errors\n});\n\nreq.on('response', function (res) {\n  var stream = this; // `this` is `req`, which is a stream\n\n  if (res.statusCode !== 200) {\n    this.emit('error', new Error('Bad status code'));\n  }\n  else {\n    stream.pipe(feedparser);\n  }\n});\n\nfeedparser.on('error', function (error) {\n  // always handle errors\n});\n\nfeedparser.on('readable', function () {\n  // This is where the action is!\n  var stream = this; // `this` is `feedparser`, which is a stream\n  var meta = this.meta; // **NOTE** the \"meta\" is always available in the context of the feedparser instance\n  var item;\n\n  while (item = stream.read()) {\n    console.log(item);\n  }\n});\n\n```\n\nYou can also check out this nice [working demo](https://github.com/scripting/feedParserDemo).\n\n### options\n\n- `normalize` - Set to `false` to override Feedparser's default behavior,\n  which is to parse feeds into an object that contains the generic properties\n  patterned after (although not identical to) the RSS 2.0 format, regardless\n  of the feed's format.\n\n- `addmeta` - Set to `false` to override Feedparser's default behavior, which\n  is to add the feed's `meta` information to each article.\n\n- `feedurl` - The url (string) of the feed. FeedParser is very good at\n  resolving relative urls in feeds. But some feeds use relative urls without\n  declaring the `xml:base` attribute any place in the feed. This is perfectly\n  valid, but we don't know know the feed's url before we start parsing the feed\n  and trying to resolve those relative urls. If we discover the feed's url, we\n  will go back and resolve the relative urls we've already seen, but this takes\n  a little time (not much). If you want to be sure we never have to re-resolve\n  relative urls (or if FeedParser is failing to properly resolve relative urls),\n  you should set the `feedurl` option. Otherwise, feel free to ignore this option.\n\n- `resume_saxerror` - Set to `false` to override Feedparser's default behavior, which\n  is to emit any `SAXError` on `error` and then automatically resume parsing. In\n  my experience, `SAXErrors` are not usually fatal, so this is usually helpful\n  behavior. If you want total control over handling these errors and optionally\n  aborting parsing the feed, use this option.\n\n## Examples\n\nSee the [`examples`](examples/) directory.\n\n## API\n\n### Transform Stream\n\nFeedparser is a [transform stream](http://nodejs.org/api/stream.html#stream_class_stream_transform) operating in \"object mode\": XML in -> Javascript objects out.\nEach readable chunk is an object representing an article in the feed.\n\n### Events Emitted\n\n* `meta` - called with feed `meta` when it has been parsed\n* `error` - called with `error` whenever there is a Feedparser error of any kind (SAXError, Feedparser error, etc.)\n\n## What is the parsed output produced by feedparser?\n\nFeedparser parses each feed into a `meta` (emitted on the `meta` event) portion\nand one or more `articles` (emited on the `data` event or readable after the `readable`\nis emitted).\n\nRegardless of the format of the feed, the `meta` and each `article` contain a\nuniform set of generic properties patterned after (although not identical to)\nthe RSS 2.0 format, as well as all of the properties originally contained in the\nfeed. So, for example, an Atom feed may have a `meta.description` property, but\nit will also have a `meta['atom:subtitle']` property.\n\nThe purpose of the generic properties is to provide the user a uniform interface\nfor accessing a feed's information without needing to know the feed's format\n(i.e., RSS versus Atom) or having to worry about handling the differences\nbetween the formats. However, the original information is also there, in case\nyou need it. In addition, Feedparser supports some popular namespace extensions\n(or portions of them), such as portions of the `itunes`, `media`, `feedburner`\nand `pheedo` extensions. So, for example, if a feed article contains either an\n`itunes:image` or `media:thumbnail`, the url for that image will be contained in\nthe article's `image.url` property.\n\nAll generic properties are \"pre-initialized\" to `null` (or empty arrays or\nobjects for certain properties). This should save you from having to do a lot of\nchecking for `undefined`, such as, for example, when you are using jade\ntemplates.\n\nIn addition, all properties (and namespace prefixes) use only lowercase letters,\nregardless of how they were capitalized in the original feed. (\"xmlUrl\" and\n\"pubDate\" also are still used to provide backwards compatibility.) This decision\nplaces ease-of-use over purity -- hopefully, you will never need to think about\nwhether you should camelCase \"pubDate\" ever again.\n\nThe `title` and `description` properties of `meta` and the `title` property of\neach `article` have any HTML stripped if you let feedparser normalize the output.\nIf you really need the HTML in those elements, there are always the originals:\ne.g., `meta['atom:subtitle']['#']`.\n\n### List of meta properties\n\n* title\n* description\n* link (website link)\n* xmlurl (the canonical link to the feed, as specified by the feed)\n* date (most recent update)\n* pubdate (original published date)\n* author\n* language\n* image (an Object containing `url` and `title` properties)\n* favicon (a link to the favicon -- only provided by Atom feeds)\n* copyright\n* generator\n* categories (an Array of Strings)\n\n### List of article properties\n\n* title\n* description (frequently, the full article content)\n* summary (frequently, an excerpt of the article content)\n* link\n* origlink (when FeedBurner or Pheedo puts a special tracking url in the `link` property, `origlink` contains the original link)\n* permalink (when an RSS feed has a `guid` field and the `isPermalink` attribute is not set to `false`, `permalink` contains the value of `guid`)\n* date (most recent update)\n* pubdate (original published date)\n* author\n* guid (a unique identifier for the article)\n* comments (a link to the article's comments section)\n* image (an Object containing `url` and `title` properties)\n* categories (an Array of Strings)\n* source (an Object containing `url` and `title` properties pointing to the original source for an article; see the [RSS Spec](http://cyber.law.harvard.edu/rss/rss.html#ltsourcegtSubelementOfLtitemgt) for an explanation of this element)\n* enclosures (an Array of Objects, each representing a podcast or other enclosure and having a `url` property and possibly `type` and `length` properties)\n* meta (an Object containing all the feed meta properties; especially handy when using the EventEmitter interface to listen to `article` emissions)\n\n## Help\n\n- Don't be afraid to report an [issue](https://github.com/danmactough/node-feedparser/issues).\n- You can drop by [Gitter](https://gitter.im/danmactough/node-feedparser?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge), too.\n\n## Contributors\n\nView all the [contributors](https://github.com/danmactough/node-feedparser/graphs/contributors).\n\nAlthough `node-feedparser` no longer shares any code with `node-easyrss`, it was\nthe original inspiration and a starting point.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2011-2016 Dan MacTough and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/danmactough/node-feedparser.git"
  },
  "scripts": {
    "lint": "eslint .",
    "pretest": "npm run lint",
    "test": "mocha",
    "version": "git changelog ; git add History.md"
  },
  "version": "2.2.9"
}
